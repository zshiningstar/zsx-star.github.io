{"pages":[{"title":"关于我","text":"朋友你们好呀！欢迎来到我的网站，这里会做一些小知识的分享，希望我们可以一起进步！ 关于我 苦逼研究生一枚 主要从事无人驾驶汽车的研究和学习 主要学习：C++、ROS、C、MATLAB… 联系我 Email: 16603860375@163.com weixin: s13837176433","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"文章分类","text":"","link":"/tags/index.html"}],"posts":[{"title":"MATLAB保存工作区变量为mat文件","text":"MATLAB保存工作区变量为mat文件 保存工作区变量12filename = 'a.mat';save(filename)","link":"/2020/12/19/MATLAB%E4%BF%9D%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%8F%98%E9%87%8F/"},{"title":"MATLAB如何导出高清绘图结果","text":"MATLAB导出高清绘图结果 MATLAB如何导出高清绘图结果 1、图像出来以后，在上方选择点击“编辑选项” 2、在编辑选项里面选择“复制图片” 3、打开word，粘贴，即可得到高清图片以上方法比直接导出为图片高清很多","link":"/2020/12/19/MATLAB%E5%AF%BC%E5%87%BA%E9%AB%98%E6%B8%85%E7%BB%98%E5%9B%BE%E7%BB%93%E6%9E%9C/"},{"title":"ROS串口通信：从串口读取出来的数字是负数解决办法","text":"简介ROS读取串口的信息时，解析到字节里面的值为负数；然而我们想要的是正数…. 1、问题描述 基于ROS在进行串口通讯时，从串口数据流中读出来的数有的是负数 123456void parseFromStm(const char* buffer) // 解析串口数据的函数{ a = ((buffer[5] * 256 + buffer[6]) - 30000) * 0.01; b = ((buffer[7] * 256 + buffer[8]) - 30000) * 0.01;} 实际测试时，发送端在buffer[5]中放117，buffer[6]中放248 解析时发现，buffer[5]依然是117，但是buffer[6]中却解析出来了-8，与期望不符合 2、问题解决 通过比较-8和248可知：两者绝对值相加为256，恰好为一个字节上限 有符号一个字节可表示范围为：-128-127无符号一个字节可表示范围为：0-255 猜测是因为解析函数中的buffer形参被定义为char类型；默认为是有符号char型，当这个位置存放的数据大于127之后，默认从-128开始导致读出数据为负数 代码修改，将解析函数中的buffer形参被定义为unsigned char类型(并将对应的函数声明位置也进行改动) 问题完美解决 123456void parseFromStm(const unsigned char* buffer) // 解析串口数据的函数{ a = ((buffer[5] * 256 + buffer[6]) - 30000) * 0.01; b = ((buffer[7] * 256 + buffer[8]) - 30000) * 0.01;}","link":"/2020/12/22/ROS%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%EF%BC%9A%E4%BB%8E%E4%B8%B2%E5%8F%A3%E8%AF%BB%E5%8F%96%E5%87%BA%E6%9D%A5%E7%9A%84%E6%95%B0%E5%AD%97%E6%98%AF%E8%B4%9F%E6%95%B0%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"title":"MATLAB读取TXT文件","text":"MATLAB读取txt文件,并绘图 MATLAB读取txt文件 将txt文件放在程序源码所在文件夹 输入以下命令（a为文件名字） importdata(a.txt);a.data; // 获取txt文件的数据plot(a.data(;1),a.data(;2))","link":"/2020/12/19/MATLAB%E8%AF%BB%E5%8F%96TXT%E6%96%87%E4%BB%B6/"},{"title":"VS添加graphics.h、mmsystem.h、conio.h、windows.h头文件","text":"VS添加图形及window相关的头文件 VS2017 添加graphics.h、mmsystem.h、conio.h、windows.h头文件graphics.h、mmsystem.h、conio.h、windows.h一、graphics图形库的安装 下载地址:https://easyx.cn/downloads/ 选择2018春分版本 然后运行下载好的exe文件，安装对应版本的图形库 二、配置mmsystem.h、conio.h、windows.h 这三个头文件是和windows SKD有关的 打开下面这个软件：点击查看提示 参考教程：https://blog.csdn.net/z_m_1/article/details/80833782 安装SKD后，参考以下网址：选择最新的SKD即可 https://blog.csdn.net/qq_30396379/article/details/106142257","link":"/2020/12/17/VS%E6%B7%BB%E5%8A%A0%E5%9B%BE%E5%BD%A2%E5%92%8Cwindow%E7%9B%B8%E5%85%B3%E7%9A%84%E5%A4%B4%E6%96%87%E4%BB%B6/"},{"title":"ROS:fatal error: Eigen&#x2F;Dense: 没有那个文件或目录","text":"fatal error: Eigen/Dense: 没有那个文件或目录 ROS出现：fatal error: Eigen/Dense: 没有那个文件或目录解决办法：123cd /usr/includesudo ln -sf eigen3/Eigen Eigensudo ln -sf eigen3/unsupported unsupported","link":"/2020/12/19/fatal-error-Eigen-Dense-%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/"},{"title":"ssh: connect to host github.com port 22: Connection refused","text":"问题描述在ubuntu下上传代码至GitHub，出现：ssh: connect to host github.com port 22: Connection refused 1、问题描述 ssh: connect to host github.com port 22: Connection refused 2、解决办法2.1 第一种 在.ssh文件夹下建立config文本文件，里面写入 123456Host github.comUser fulinux@sina.comHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443 终端输入以下代码测试,若有提示输入yes/no时输入yes 1ssh -T git@github.com 完成以上操作便可以继续 git push -u origin main 2.2 第二种 1、先输入 git remote -v 查看此时是否有链接的远程库（没有则不显示） 2、添加ssh协议的远程库git remote add origin git@github.com:xxx.git 3、再次查看： git remote -v 出现本问题所示问题：ssh: connect to host github.com port 22: Connection refused 此时是因为第一种协议被禁掉了，只能换一种连接进行合并本地仓库了 4、git remote rm origin 移除掉远程库 5、重新添加新的远程仓库，以https的形式：git remote add origin https://github.com/xxx.git 解决","link":"/2020/12/22/ssh-connect-to-host-github-com-port-22-Connection-refused/"},{"title":"两数之和","text":"给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。 您可以假设除了数字 0 之外，这两个数都不会以 0 开头。 示例： 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */class Solution { public: ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { ListNode* root = new ListNode(0); //初始化一个节点值为0的结点，存放相加的结果 ListNode* cursor = root; //复制构造另外一个指针对象用来后续的操作 int carry = 0; //初始进位值为0 while(l1 != NULL || l2 != NULL || carry != 0) { int l1Val = l1 != NULL ? l1-&gt;val : 0; int l2Val = l2 != NULL ? l2-&gt;val : 0; int sumVal = l1Val + l2Val + carry; //对应位上加起来的总和 carry = sumVal / 10; //取商，如果商为1，说明下一位有进位值 ListNode* sumNode = new ListNode(sumVal % 10); // 初始化一个节点值为余数的结点，作为第i个位的计算和 cursor-&gt;next = sumNode; //衔接到cursor后再后移 cursor = sumNode; //衔接到cursor后再后移 if(l1 != NULL) l1 = l1-&gt;next; //不等于0时，取下一位的值 if(l2 != NULL) l2 = l2-&gt;next; } return root-&gt;next; //返回相加的结果 }};创建一个新的链表： ListNode list=new ListNode() 初始化一个空节点，无值,不提倡此种写法。 ListNode list=new ListNode(0) 初始化一个节点值为0的空节点，最常用最正规写法 ListNode list=null 为空，什么都没有，一般不这么写；struct ListNode { int val; //定义val变量值，存储节点值 struct ListNode *next; //定义next指针，指向下一个节点，维持节点连接 } • 在节点ListNode定义中，定义为节点为结构变量。 • 节点存储了两个变量：value 和 next。value 是这个节点的值，next 是指向下一节点的指针，当 next 为空指针时，这个节点是链表的最后一个节点。 • 注意注意val只代表当前指针的值，比如p-&gt;val表示p指针的指向的值；而p-&gt;next表示链表下一个节点，也是一个指针。构造函数包含两个参数 _value 和 _next ，分别用来给节点赋值和指定下一节点。","link":"/2020/10/21/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"},{"title":"删除链表的第n个节点","text":"题目描述：给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。 示例： 给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2. 当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.说明： 给定的 n 保证是有效的。 1、代码1234567891011121314151617181920212223242526272829303132333435/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */class Solution {public: int getlength(ListNode* head){ int length = 0; while(head){ length++; head = head-&gt;next; } return length; } ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* first = new ListNode(0,head); ListNode* second = first; int length = getlength(head); for(int i = 1;i&lt;(length - n + 1);i++){ second = second-&gt;next; } second-&gt;next = second-&gt;next-&gt;next; ListNode* ans = first-&gt;next; delete first; return ans; }}; 2、分析 关于为什么定义三个链表； 因为first是用new关键字分配的内存，最后是要进行delete的，所以至少得有两个链表存在；而second在 second-&gt;next = second-&gt;next-&gt;next;时只保留了从length-n+1往后的值，所以得再定义一个链表，用来存放最终的结果； 在对链表进行操作时，一种常用的技巧是添加一个哑节点（dummy node），它的next 指针指向链表的头节点。这样一来，我们就不需要对头节点进行特殊的判断了。如果我们要删除节点 yy，我们需要知道节点 yy 的前驱节点 xx，并将 xx 的指针指向 yy 的后继节点。但由于头节点不存在前驱节点，因此我们需要在删除头节点时进行特殊判断。但如果我们添加了哑节点，那么头节点的前驱节点就是哑节点本身，此时我们就只需要考虑通用的情况即可","link":"/2020/12/21/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/"},{"title":"判断整数是否回文","text":"判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。 示例 1: 输入: 121输出: true示例 2: 输入: -121输出: false解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。 1234567891011121314重点：主要是如何求一个整数的反转值 bool isPalindrome(int x) { int num = x; long rev = 0; if(x &lt; 0){ return false; } while(num != 0){ rev = (num % 10) + rev * 10; num = num / 10; } return rev == x; //判断是否相等 }","link":"/2020/10/15/%E5%88%A4%E6%96%AD%E6%95%B4%E6%95%B0%E6%98%AF%E5%90%A6%E5%9B%9E%E6%96%87/"},{"title":"博客主页配置","text":"博文主页配置 一、在博文中添加图片 首先安装图片插件(在blog根目录下) 1cnpm install hexo-asset-image --save 在_config.yml配置文件中，修改为 post_asset_folder: true 新建一个博文： 1hexo new post best 二、给博文正确设置邮箱链接12- icon: fas fa-envelope url: mailto:XXXXXXXX@163.com 三、Hexo给网站换图标 下载好的目标图标放在 /themes/next/source/images 路径下 目标图像的名字设置为 a.jpg 修改主题配置文件_config.yml如下：123456789favicon: small: /images/a.jpg #medium: /images/a.jpg medium: /images/a.jpg apple_touch_icon: /images/a.jpg safari_pinned_tab: /a.jpg #android_manifest: /manifest.json","link":"/2020/12/17/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E9%85%8D%E7%BD%AE/"},{"title":"博客主题--更换博客主题","text":"博客主题更换为next 主题链接：https://github.com/iissnan/hexo-theme-nextblog目录下终端运行：git clone https://github.com/iissnan/hexo-theme-next.git themes/next 什么是blog 目录，可以参考我的上篇文章：https://www.cnblogs.com/whutseu/p/14127342.html 修改——config.yml文件 找到主题那一行，直接修改主题冒号后面的主题名字为 next hexo clean （若遇到问题参考以下解决） https://www.jianshu.com/p/861307262429 hexo g 重新生成hexo s 本地查看hexo d 推送github","link":"/2020/12/17/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98-%E6%9B%B4%E6%8D%A2%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/"},{"title":"博客搭建--Hexo+Github","text":"博客搭建-Github&amp;Hexo（Windows环境）###(以下在cmd文件下安装过程中没有error的话warning都不用管)一、安装Node.js(去官网下载LTS版本) 官网地址：https://nodejs.org/en/ 一直点击next即可 打开cmd，输入node -v可以查看刚才安装的node版本 npm -v 查看安装的包管理器的版本 因为Hexo需要node.js支持的 二、安装cnpm 利用npm包管理器来安装的，但是国内镜像源安装很慢，所以采用另一方式 用npm全局安装cnpm用淘宝的源：npm install -g cnpm --registry=https://registry.npm.taobao.org 至此cnpm作为包管理器来使用 三、安装博客框架 安装hexo-cli博客框架cnpm install -g hexo-cli chdir 查看当前文件夹 当前文件夹下建立自己的博客文件夹mkdir blog 四、安装git（已经安装过的可以忽略） 因为接下来的hexo框架安装需要用到git,如果没安装git，就会报错 下载网址：https://gitforwindows.org/参考教程：https://jingyan.baidu.com/article/8cdccae90beafa315413cd13.html 五、初始化一个博客 在创建的blog下面进行初始化 hexo init 时间较长可以等待一会 六、启动博客 hexo start 在终端可以看到自己的本地4000端口号上有一篇博文：hello world 七、创建博文 hexo n “博文名字” 在blog文件夹下，cd source/_posters,可以发现自己的md文件 使用文本编辑器采用markdown语法进行编辑便可以写自己的博文了 八、将博客部署到Github 在github上新建一个仓库，仓库名字必须为：你的用户名.github.io 回到终端blog文件夹下面，装一个插件cnpm install --save hexo-deployer-git 配置——config.yml（一个编辑器即可） 点击查看提示 在文件最底端可以发现一个环境的配置行；修改为自己的GitHub地址等内容 点击查看提示 hexo d 将blog下的全部部署到GitHub 然后浏览器输入这个仓库后面的部分即可进入自己的网站 写在最后 如果出现了找不到 zsx-star.github.io 的服务器 IP 地址。的问题则需要改一下hosts文件 点击查看提示 使用文本编辑器添加以下内容:204.232.175.78 http://documentcloud.github.com 207.97.227.239 http://github.com 204.232.175.94 http://gist.github.com 107.21.116.220 http://help.github.com 207.97.227.252 http://nodeload.github.com 199.27.76.130 http://raw.github.com 107.22.3.110 http://status.github.com 204.232.175.78 http://training.github.com 207.97.227.243 http://www.github.com 以上所有添加的内容根据hosts文件格式添加在最后即可 使得host文件生效 点击查看提示","link":"/2020/12/17/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-Hexo/"},{"title":"命令行清除命令（Linux，Windows cmd）","text":"系统命令行清除命令 Linux 终端页面清除命令： clear 查看当前路径： pwd Windows cmd 命令行清除命令： cls 查看当前路径： chdir","link":"/2020/12/17/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B8%85%E9%99%A4%E5%91%BD%E4%BB%A4%EF%BC%88Linux%EF%BC%8CWindows-cmd%EF%BC%89/"}],"tags":[{"name":"MATLAB","slug":"MATLAB","link":"/tags/MATLAB/"},{"name":"串口通信","slug":"串口通信","link":"/tags/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"},{"name":"ROS","slug":"ROS","link":"/tags/ROS/"},{"name":"C","slug":"C","link":"/tags/C/"},{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"gitbub","slug":"gitbub","link":"/tags/gitbub/"},{"name":"LeetCode","slug":"LeetCode","link":"/tags/LeetCode/"},{"name":"链表","slug":"链表","link":"/tags/%E9%93%BE%E8%A1%A8/"},{"name":"博客管理","slug":"博客管理","link":"/tags/%E5%8D%9A%E5%AE%A2%E7%AE%A1%E7%90%86/"},{"name":"系统命令","slug":"系统命令","link":"/tags/%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/"}],"categories":[{"name":"MATLAB","slug":"MATLAB","link":"/categories/MATLAB/"},{"name":"ROS","slug":"ROS","link":"/categories/ROS/"},{"name":"C++","slug":"C","link":"/categories/C/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"系统","slug":"系统","link":"/categories/%E7%B3%BB%E7%BB%9F/"}]}